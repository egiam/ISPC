<!--suppress ALL -->
<html data-lt-installed="true" class="no-touch"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <link rel="stylesheet" href="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/bootstrap.min.css">
    <link rel="stylesheet" href="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/styles.css">
    <link rel="stylesheet" href="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/menu.css">
    <link href="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/css.css" rel="stylesheet" type="text/css">
    <meta charset="utf-8">
    <title> Paradigma de la programación orientada a objetos </title>
</head>

<body data-new-gr-c-s-check-loaded="8.905.0" data-gr-ext-installed="">
<div class="todo">
    <ul class="menu">
        <li><a class="menu-item" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/index.html">Programación Orientada a Objetos</a>
            <ul>
                <li><a class="menu-item1" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/index.html#intro">¿Qué es?</a></li>
                <li><a class="menu-item1" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/index.html#history">Historia</a></li>
                <li><a class="menu-item1" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/index.html#evolution">Evolución</a></li>
                <li><a class="menu-item1" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/index.html#advantage_disadvantage">Ventajas y desventajas</a></li>
                <li><a class="menu-item1" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/index.html#languages">Lenguajes</a></li>
            </ul>
        </li>
        <li><a class="menu-item" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/concepts.html">Conceptos Clave</a>
            <ul>
                <li><a class="menu-item1" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/concepts.html#abstraccion">Abstracción</a></li>
                <li><a class="menu-item1" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/concepts.html#modularidad">Modularidad</a></li>
                <li><a class="menu-item1" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/concepts.html#encapsulamiento">Encapsulamiento</a></li>
                <li><a class="menu-item1" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/concepts.html#herencia">Herencia</a></li>
                <li><a class="menu-item1" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/concepts.html#polimorfismo">Polimorfismo</a></li>
            </ul>
        </li>
        <li><a class="menu-item" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/philosophy.html">Filosofía y Principios</a>
            <ul>
                <li><a class="menu-item1" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/philosophy.html#filosofia">Filosofía</a></li>
                <li><a class="menu-item1" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/philosophy.html#principios">Principios</a></li>
                <li><a class="menu-item1" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/philosophy.html#buenaspracticas">Buenas prácticas</a></li>
            </ul>
        </li>
        <li><a class="menu-item" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/examples.html" id="">Ejemplos interactivos</a>
            <ul>
                <li><a class="menu-item1" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/examples.html#clases">Clases</a></li>
                <li><a class="menu-item1" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/examples.html#encapsulamiento">Encapsulamiento</a></li>
                <li><a class="menu-item1" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/examples.html#herencia">Herencia</a></li>
                <li><a class="menu-item1" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/examples.html#polimorfismo">Polimorfismo</a></li>
            </ul>
        </li>

        <li><a class="menu-item" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/applications.html">Aplicaciones</a></li>
        <li><a class="menu-item" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/slides.html">Presentaciones y referencias</a>
            <ul>
                <li><a class="menu-item1" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/slides.html#slides">Presentaciones</a></li>
                <li><a class="menu-item1" href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/slides.html#referencias">Referencias y bibliografía</a></li>
            </ul>
        </li>
    </ul>


    <div class="empty">Empty</div>
    <div class="container">
        <h1 class="titulo">
            <strong>
                <center>Programación Orientada a Objetos</center>
            </strong>
        </h1>
        <hr>
        <br>


        <section id="concepts">
            <h2 id="concepts1"><strong>Conceptos clave</strong></h2>
            <ul style="list-style-type: circle;">
                <h3>
                    <div class="row">
                        <div class="left">
                            <li>Abstracción</li>
                            <li>Clase</li>
                            <li>Atributo</li>
                            <li>Método</li>
                            <li>Objeto</li>
                            <li>Instancia</li>
                            <li>Diagramas de <br>clases</li>
                            <li>Mensaje</li>
                            <li>Constructor</li>
                            <li>Destructor</li>
                            <li>Evento</li>
                            <li>Sobreescritura</li>


                        </div>
                        <div class="right">
                            <li>Clase Abstracta</li>
                            <li>Interfaz</li>
                            <li>Métodos de acceso</li>
                            <li>Modificadores de acceso</li>
                            <li>Modularidad</li>
                            <li>Encapsulamiento</li>
                            <li>Herencia</li>
                            <li>Polimorfismo</li>
                            <li>Atributos estáticos</li>
                            <li>Métodos estáticos</li>
                            <li>Clases estáticas</li>
                            <li>Hilos</li>
                        </div>

                    </div>
                    <br>

                    </h3><h3>
                        <!--Abstracción-->
                        <div align="justify"><strong id="clase">Abstracción </strong><br><br>
                            La abstracción es un proceso de interpretación y diseño que implica reconocer y enfocarse en
                            las características importantes de una
                            situación u objeto, y filtrar o ignorar todas las particularidades no esenciales.
                            <ul style="list-style-type: circle;">
                                <li>Dejar a un lado los detalles de un objeto y definir las características específicas
                                    de éste, aquellas que lo distingan de
                                    los demás tipos de objetos.
                                </li>
                                <li>Hay que centrarse en lo que es y lo que hace un objeto, antes de decidir cómo
                                    debería ser implementado.
                                </li>
                                <li>Se hace énfasis en el qué hace más que en el cómo lo hace</li>
                            </ul>

                            <br>
                            <center><img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/Abstraccion.jpg" alt="Photo" id="ventajas" hspace="0" border="0">
                            </center>
                            <br>
                            Ejemplo: Imaginemos que queremos aplicar la abstracción a las aves:<br><br>
                            <b>Objeto</b>: Pajaro <br><br>
                            <b>Caracteristicas:</b>
                            <ul style="list-style-type: circle;">
                                <li>Pico</li>
                                <li>Alas</li>
                                <li>Patas</li>
                                <li>Plumas</li>
                            </ul>
                            <b>Funcionalidades:</b>
                            <ul style="list-style-type: circle;">
                                <li>Volar</li>
                                <li>Picar</li>
                                <li>Aterrizar</li>
                            </ul>
                            <br>
                            <!--Clase-->
                            <h3>
                                <div align="justify"><strong id="clase">Clase </strong><br>La clase es un modelo o
                                    prototipo que define las variables y métodos
                                    comunes a todos los objetos de cierta clase. También se puede mencionar que una
                                    clase es una plantilla genérica para un conjunto de
                                    objetos de similares características. Una clase define el estado y el comportamiento
                                    que todos los objetos creados a partir de esa
                                    clase tendrán.<br>

                                </div>
                                <br>
                                Ejemplo:<br><br>
                                <center>
                                    <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/exampleclass1.png" id="ventajas">
                                </center>
                                <br><br>
                                Ejemplo desarrollado en Java:<br><br>
                                <center>
                                    <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/classjava.png">
                                </center>
                                <br><br>
                                Ejemplo desarrollado en C++:<br><br>
                                <center>
                                    <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/classc++.png">
                                </center>
                                <br><br>
                                Ejemplo desarrollado en Python:<br><br>
                                <center>
                                    <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/classpython.png">
                                </center>
                                <br><br>
                                <!--Atributo-->
                                <div id="atributos" align="justify">
                                    <br><strong>Atributo</strong>
                                    <br><br>Es una característica de un objeto, que ayuda a
                                    definir su estructura y permite diferenciarlo de otros objetos.
                                    Se define con un identificador y un tipo, el cual indica los valores que puede
                                    almacenar. El conjunto de valores de los campos definen
                                    el estado del objeto.
                                </div>
                                <br>
                                <!--Métodos-->
                                <div id="metodos" align="justify">
                                    <br><br><strong>Métodos</strong>
                                    <br>Los métodos son los comportamientos o conductas de un
                                    objeto y permite identificar la forma en que actúa respecto a su entorno
                                    o respecto a otros objetos. Además, representa una operación o función que un objeto
                                    realiza. El conjunto de los métodos de un objeto determinan el
                                    comportamiento general del objeto.
                                </div>
                                <br>

                                <center>
                                    <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/atributo.png" id="ventajas">
                                </center>
                                <br><br>

                                <!--Objeto-->
                                <div align="justify"><br><strong> Objeto</strong>
                                    <br><br>Los objetos de software, al igual que
                                    los objetos del mundo real, también tienen características
                                    y comportamientos. Un objeto de software mantiene sus características en uno o más
                                    atributos e implementa su comportamiento con métodos.<br> <br>
                                    <ul style="list-style-type: circle;">
                                        <li>Es una entidad real o abstracta, con un papel definido en el dominio del
                                            problema.
                                        </li>
                                        <li>Un objeto es una instancia de una clase, que tiene: identidad,
                                            estado(atributos) y comportamiento(metodos).
                                        </li>
                                    </ul>
                                    Para el ejemplo anterior de la Clase UniversityStudent (Estudiante universitario),
                                    la creacion de objetos se haria de la siguiente forma:<br><br>
                                    <center>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/objects.png">
                                    </center>
                                </div>
                                <br><br>
                                <!--Instancia-->
                                <br><strong>Instancia</strong>
                                <br><br>Es la particularización, realización específica u
                                ocurrencia de una determinada clase,
                                entidad o prototipo. Una instancia de una clase es un objeto.<br> <br>

                                Ejemplo:
                                <br>
                                <center>
                                    <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/claseanimal.png">
                                </center>
                                <br>
                                <br>
                                Si se tiene la anterior clase <i>Animal</i>, se podría crear una instancia de esa clase
                                como un objeto.
                                <br><br>
                                <center>
                                    <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/instancia.png">
                                </center>
                                <br>
                                En este caso, una instancia de la clase <i>Animal</i> es la creación de un nuevo objeto
                                (perro) de <u>nombre</u> "Zeus" y <u>raza</u> "labrador". También se puede
                                definir una instancia de una clase dentro de otra clase como el siguiente ejemplo .
                                <br><br>
                                <center>
                                    <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/instancia2.png">
                                </center>
                                <br>
                                Como se puede observar, la clase <i>Estudiante</i> tiene una instancia de la clase <i>Nota</i>
                                como atributo (<u>evaluación</u>).
                                <br><br><br>

                                <!--Diagramas de clases-->
                                <div align="justify"><br><strong>Diagramas de clases</strong>
                                    <br><br>Cuando se está planteando el diseño y el modelo de los objetos mediante la
                                    abstracción, existe una forma de plasmar esos prototipos a través de un
                                    diagrama de clases. Formalmente, se describe como un tipo de diagrama de estructura
                                    estática que representa la estructura de un sistema mostrando las clases,
                                    sus atributos, operaciones (o métodos), y las relaciones entre los objetos.

                                    <br><br>
                                    <center>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/diagramaclase.png" id="ventajas">
                                    </center>
                                    <br>
                                    En los diagramas de clase, se tienen notaciones que son comunes dentro del lenguaje
                                    de modelado unificado (UML). Por ejemplo, la <a href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/herencia">herencia</a> se
                                    dibuja
                                    mediante un triángulo donde su eje superior apunta a la clase padre. La visibilidad
                                    de los atributos que tiene la clases se denota con un + (público), - (protegido),
                                    # (protegido). La relación que tiene un objeto con otro se representa dependiendo de
                                    su categoría, una relación de asociación es una línea sencilla que
                                    une las dos clases vinculadas, una relación de agregación (existe una instancia de
                                    un objeto en una clase) se describe mediante un rombo vacío y una relación
                                    de composición(la existencia de una clase depende absolutamente de otra) se
                                    representa con un rombo relleno.
                                    <br><br>
                                    Para este ejemplo concretamente, la clase <i>Empleado</i> y la clase <i>Cliente</i>
                                    heredan de la clase <i>Persona</i>. Todos los atributos de las clases son
                                    privados, como se detalla en la clase <i>Persona</i> con el signo negativo antes de
                                    nombre y edad. Además, existe una relación de composición entre la
                                    clase <i>Empleado</i> y la clase <i>Empresa</i>, es decir, si un objeto
                                    <i>Empresa</i> deja de existir, la clase <i>Empleado</i> también va a dejar de
                                    existir.

                                </div>
                                <br>
                                <br>
                                <!--Mensaje-->
                                <div align="justify"><br><strong> Mensaje </strong>
                                    <br><br>Un mensaje es una comunicación dirigida desde un objeto A ordenando a otro
                                    objeto B
                                    que ejecute uno de sus métodos con ciertos parámetros asociados al evento que lo
                                    generó.<br>
                                    Los mensaje son los que permiten la comunicacion entre objetos.<br>
                                    Ejemplo:<br><br>
                                    <center>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/mensaje.png" id="ventajas">
                                    </center>
                                </div>
                                <br><br>
                                <!--Constructor-->
                                <br><br>
                                <div align="justify"><br><strong>Constructor</strong>
                                    <br><br>Cuando se crea un objeto es
                                    necesario inicializar sus variables con valores coherentes. Esto se hace por medio
                                    de un constructor que tiene las siguientes características: Se llama igual que la
                                    clase. Retorna una instancia de una clase Pueden existir varios, pero siguiendo las
                                    reglas de la sobrecarga de funciones. De entre los que existan, tan sólo uno se
                                    ejecutará al crear un objeto de la clase.
                                    <br></div>
                                <br>
                                <center><img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/ConsPy.png" alt="Photo" id="ventajas" hspace="0" height="200" border="0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                    <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/ConsPhp.png" alt="Photo" id="ventajas" hspace="0" height="200" border="0">
                                    <h5>Constructor en Python y Constructor en PHP</h5>
                                    <br>
                                </center>
                                <!--Destructor-->
                                <br><br>
                                <div align="justify"><br><strong>Destructor</strong>
                                    <br><br>Es un método de una clase cuyo fin es eliminar un objeto de una clase.
                                    <br></div>
                                <br>
                                <center><img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/destructor1.png" alt="Photo" id="ventajas" hspace="0" height="200" border="0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                    <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/destructor2.png" alt="Photo" id="ventajas" hspace="0" height="200" border="0">
                                    <h5>Constructor en C++ y su respectivo destructor en C++</h5>
                                    <br>
                                </center>
                                <!--Evento-->
                                <br><br>
                                <div align="justify"><br><strong>Evento</strong>
                                    <br><br>Los eventos son todas las acciones que el usuario inicia al dar clic sobre
                                    un
                                    botón, presionar una tecla, etc. Cada vez que se produce un evento se crea
                                    un objeto.
                                    <br></div>
                                <br>
                                <center><img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/evento1.png" alt="Photo" id="ventajas" hspace="0" height="200" border="0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                    <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/evento2.png" alt="Photo" id="ventajas" hspace="0" height="200" border="0">
                                    <h5>Una ventana con un botón y el resultado de darle clic al botón</h5>
                                    <br>
                                </center>
                                <!--Sobreescritura-->
                                <br><br>
                                <div align="justify"><br><strong>Sobreescritura</strong>
                                    <br><br>Consiste en sobreescribir métodos heredados de una clase padre.
                                    <br></div>
                                <br>
                                <center>
                                    <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/sobre1.png" alt="Photo" id="ventajas" hspace="0" height="100" border="0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                    <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/sobre2.png" alt="Photo" id="ventajas" hspace="0" height="100" border="0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                    <br><br>
                                    <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/sobre3.png" alt="Photo" id="ventajas" hspace="0" height="100" border="0">
                                    <h5>Ejemplo de la clase Animal (Clase padre) y las clases perro y oveja (Clases
                                        hijas) sobreescribiendo el método "hacerSonido heredado"</h5>
                                    <h5>Hecho en Python3</h5>
                                    <br>
                                </center>
                                <!--Clase abstracta-->
                                <br>
                                <div align="justify"><br><strong>Clase Abstracta</strong>
                                    <br><br>Este tipo de clases nos permiten crear "métodos generales", que recrean un
                                    comportamiento común,
                                    pero sin especificar cómo lo hacen. A nivel de código tiene por particularidad que
                                    algunos de sus métodos no tienen “cuerpo de declaración“.
                                    <br><br>
                                    <ul style="list-style-type: circle;">
                                        <li>Una clase que declara la existencia de métodos pero no la implementación de
                                            dichos métodos (o sea, las llaves { } y las sentencias entre ellas),
                                            se considera una clase abstracta.
                                        </li>
                                        <li>Una clase es declarada abstracta cuando no es posible crear instancias de
                                            ella.
                                        </li>
                                        <li>Una clase debe ser declarada abstracta si posee al menos un método declarada
                                            abstracto.
                                        </li>
                                        <li>Un método abstracto es aquel que no posee implementación.</li>
                                    </ul>
                                    <br>
                                    <center><img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/AbsInt.png" alt="Photo" id="ventajas" hspace="0" border="0">
                                        <h5>Clases abstractas vs Interfaces</h5>
                                    </center>
                                    <br>
                                </div>
                                <br>
                                <!--Interfaz-->
                                <div align="justify"><br><strong>Interfaz</strong>
                                    <br><br>Es un conjunto de métodos abstractos y
                                    de constantes cuya funcionalidad es la de determinar
                                    el funcionamiento de una clase, es decir, funciona como un molde o como una
                                    plantilla. También es una descripción de las acciones que un objeto
                                    puede hacer. En programación orientada a objetos una interfaz X describe todas las
                                    funciones que un objeto debe tener para poder ser un X.<br><br>
                                    <ul style="list-style-type: circle;">
                                        <li>Una interface es una variante de una clase abstracta con la condición de que
                                            todos sus métodos deben ser abstractos. Si la interface va a tener
                                            atributos, éstos deben llevar las palabras reservadas static final y con un
                                            valor inicial ya que funcionan como constantes por lo que, por convención,
                                            su nombre va en mayúsculas.
                                        </li>
                                        <li>Una clase implementa una o más interfaces (separadas con comas ",") con la
                                            palabra reservada implements.
                                        </li>
                                        <li>La principal diferencia entre interface y abstract es que una interface
                                            proporciona un mecanismo de encapsulación de los protocolos de los métodos
                                            sin forzar al usuario a utilizar la herencia.
                                        </li>
                                    </ul>
                                    Ejemplo:<br><br>
                                    <center>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/interfaz.png" id="ventajas">
                                    </center>
                                </div>
                                <br>
                                <br>
                                Un ejemplo de uso de una interfaz se presenta en la siguiente imagen a través de un
                                diagrama de clases, donde
                                las clases <i>InstrumentoMusical</i> y <i>Sirena</i> implementan de la interfaz <i>Sonoro</i>
                                que cuenta con la declaración del
                                método <b>sonar(volumen: int)</b>.<br><br>
                                <center>
                                    <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/interface22.png" id="ventajas">
                                </center>
                                <br>
                                <!--Métodos de acceso-->
                                <div align="justify"><strong>Métodos de acceso</strong>
                                    <br><br>Son los métodos o funciones que permiten obtener o modificar los atributos
                                    de un
                                    objeto. Además,
                                    estos métodos tienen la limitación de proveer información acerca del estado de un
                                    objeto específicamente sus propiedades.
                                    <br><br>
                                    <center>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/metacceso.png" alt="Photo" id="ventajas" hspace="0" border="0">
                                    </center>
                                    <br>
                                    En el ejemplo anterior se pueden visualizar dos métodos de acceso de la clase <i>CuentaBancaria</i>.
                                    El método <i>getNumeroCuenta()</i> retorna
                                    el atributo numeroCuenta y no tiene ninguna otra especialidad. El método <i>setNumeroCuenta(String
                                        numeroCuenta)</i> actualiza el atributo
                                    numeroCuenta de acuerdo al valor pasado por parámetro.
                                </div>
                                <br>
                                <!--Modificadores de acceso-->
                                <div align="justify"><strong>Modificadores de acceso</strong>
                                    <br><br>Son palabras claves de
                                    los lenguajes de programación orientado
                                    a objetos para configurar la accesibilidad a las clases, métodos o
                                    propiedades.
                                    <br></div>
                                <br>
                                <center><img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/Acceso.png" alt="Photo" id="ventajas" hspace="0" border="0">
                                </center>
                                <br>

                                <!--Modularidad-->
                                <div align="justify"><strong>Modularidad </strong>
                                    <br><br>La modularidad es la propiedad que permite dividir una aplicación en partes
                                    más pequeñas ( llamadas módulos ), cada una de las cuales debe ser tan independiente
                                    como sea posible de la aplicación en sí y
                                    de las restantes partes.<br><br>
                                    <center>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/modularidad.png" id="ventajas">
                                    </center>
                                    <br>
                                    En el lenguaje de programación Java y en algunos entornos de desarrollo integrado
                                    (IDE), la modularidad radica en la separación de
                                    todos los posibles paquetes de código. La siguiente imagen muestra la división que
                                    se hace a partir de una aplicación base o un servicio
                                    general, que se divide en diferentes módulos con un propósito especial y finalmente
                                    un subdivición en pequeños paquetes de código que integran
                                    las clases.
                                    <br>
                                    <br>
                                    <center>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/modujava.png" id="ventajas">
                                    </center>
                                    <br>
                                </div>
                                <br>
                                <!--Encapsulamiento-->
                                <div align="justify"><strong>Encapsulamiento</strong><br><br>
                                    <ul style="list-style-type: circle;">
                                        <li>Es la propiedad que permite asegurar que la información de un objeto está
                                            oculta del mundo exterior.
                                        </li>
                                        <li>El encapsulamiento consiste en agrupar en una Clase las
                                            características(atributos) con un acceso privado y los comportamientos
                                            (métodos) con un acceso público.
                                        </li>
                                        <li>Acceder o modificar los miembros de una clase a través de sus métodos.</li>
                                    </ul>
                                    <center><img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/Encapsulamiento.jpg" alt="Photo" id="ventajas" hspace="0" border="0"></center>
                                    <br>
                                    Ejemplo: <br>
                                    Cuando no hay encapsulamiento se pueden presentar problemas:<br><br>
                                    <center>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/classjava.png">
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/main.png">
                                    </center>
                                    <br>
                                    Podemos ver que cuando no hay encapsulamiento los atributos pueden tomar valores
                                    inconsistentes, lo cual seria fatal para cualquier sistema.<br><br>
                                    Aplicando el encapsulamiento tenemos:<br><br>
                                    <center>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/encapsulamientojava.png">
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/main2.png">
                                    </center>
                                    <br><br>
                                    Con el resultado anterior vemos que el encapsulamiento nos ayuda a proteger la
                                    integridad de los datos y nos asegura que los atributos de nuestra clase solo podran
                                    ser accedidos a traves de los metodos definidos en dicha clase.<br><br>
                                    Ejemplo de encapsulamiento en C++:<br><br>
                                    <center>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/encapsulamientoc++.png">
                                    </center>
                                    <br><br>
                                    Ejemplo de encapsulamiento en Python:<br><br>
                                    <center>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/encapsulamientopython.png">
                                    </center>
                                    <br>
                                </div>
                                <br>
                                <!--Herencia-->
                                <div align="justify"><strong> Herencia</strong>
                                    <br><br> Es una propiedad que permite crear clases a partir de otras ya existentes,
                                    obteniendo características (métodos y atributos) similares a los ya existentes.En
                                    otras palabras la nueva clase (subclase o clase derivada) puede utilizar la misma
                                    implementación de su superclase (clase base) o especificar una nueva implementación.
                                    <ul style="list-style-type: circle;">
                                        <li>Es la relación entre una clase general y otra clase mas especifica.</li>
                                        <li>Es un mecanismo que nos permite crear clases derivadas a partir de clases
                                            base.
                                        </li>
                                        <li>Nos permite compartir automáticamente métodos y datos entre clases,
                                            subclases y objetos. Por ejemplo: Si declaramos una clase párrafo derivada
                                            de un clase texto todos los métodos y variables asociadas con la clase texto
                                            son automáticamente heredados por la subclase párrafo.
                                        </li>
                                    </ul>
                                    <br>
                                    <center><img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/Herencia.jpg" id="ventajas"></center>
                                    <br>
                                    <br>
                                    <b>Herencia simple</b>: Es cuando una clase hereda de sólo una clase base.<br><br>
                                    <center>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/hsimple.png" id="ventajas">
                                        <h5>La clase B hereda de la clase A.</h5>
                                    </center>
                                    <br>
                                    Ejemplo: <br><br>
                                    <center>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/ejemplohsimple.png" id="ventajas">
                                        <h5>La clases <i>Circle, Line y Triangle</i> heredan todos los atributos y
                                            métodos de la clase <i>Shape</i>.</h5>
                                    </center>
                                    <br>
                                    <br>
                                    <b>Herencia múltiple</b>: Es cuando una clase hereda de dos o más clases
                                    base.<br><br>
                                    <center>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/hmultiple.png" id="ventajas">
                                        <h5>La clase C hereda tanto de la clase A como de la clase B.</h5>
                                    </center>
                                    <br><br>
                                    Ejemplo: <br><br>
                                    <center>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/ejemplohmultiple.png" id="ventajas">
                                        <h5>En este ejemplo, las clases <i>Passenger y Employee</i> heredan de la clase
                                            <i>Human</i> y las clases <i>FlyingPlane y GroundPlane</i> heredan de la
                                            clase <i>Plane</i>.</h5>h5&gt;
                                    </center>
                                </div>
                                <br>
                                <!--Polimorfismo-->
                                <div align="justify"><strong>Polimorfismo</strong>
                                    <br><br>Son comportamientos diferentes, asociados a objetos distintos,
                                    pueden compartir el mismo nombre; al llamarlos por ese nombre se utilizará el
                                    comportamiento correspondiente al objeto que se esté usando.
                                    <br>
                                </div>
                                <br>
                                <center>
                                    <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/Polimorfismo.png" id="ventajas">
                                    <h5>El método hablar puede ser sobreescrito por cualquier entidad (humano, perro,
                                        pato, gato).</h5>
                                </center>
                                Ejemplo:<br><br>
                                <center><img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/ejemplopoli.png" id="ventajas">
                                    <h5>Ambas clases deben sobreescribir el método getArea() puesto que se calculan de
                                        diferentes maneras en cada caso.</h5>
                                </center>
                                <br>
                                <br><br>
                                <b>Tipos de polimorfismo:</b><br>
                                <ul style="list-style-type: circle;">
                                    <li>Polimorfismo Ad Hoc</li>
                                    <li>Polimorfismo paramétrico</li>
                                    <li>Polimorfismo de subtipos</li>
                                </ul>
                                <br>
                                <div align="justify">
                                    <b>Polimorfismo Ad Hoc</b>: Se refiere a funciones que cambian su comportamiento
                                    dependiendo del tipo de argumentos que reciben (sobrecarga de métodos o
                                    funciones).<br>
                                    La sobrecarga de métodos hace referencia a varios métodos con el mismo nombre pero
                                    con diferentes firmas.<br>
                                    <br>Ejemplo:<br><br>
                                    <center>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/Sobre.jpg" id="ventajas">
                                    </center>
                                    <br><br>
                                    En el lenguaje de programación <b>ABAP4</b> también se permite la sobrecarga de
                                    métodos como un tipo de polimorfismo.
                                    <br><br>
                                    <center>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/abap11.png" id="ventajas">
                                    </center>
                                    <br>
                                    En el ejemplo anterior tenemos la clase <i>Empleado</i> y se desea realizar la
                                    sobrecarga del método <b>modificarNombre</b>. Este tipo de
                                    polimorfismo se implementa como se muestra en la siguiente imagen, el método recibe
                                    un parámetro <u>i_nombre</u> para una funcionalidad
                                    específica y como segunda medida, el método recibe dos parámetros <u>i_nombre</u> y
                                    <u>i_apellido</u> para otro procedimiento en particular.
                                    <br><br>
                                    <center>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/abap22.png" id="ventajas">
                                    </center>


                                    <br><br>

                                    <b>Polimorfismo paramétrico</b>: El polimorfismo paramétrico permite que las
                                    funciones y las clases puedan escribirse de forma genérica, de tal manera que pueda
                                    manipular los datos de la misma manera sin importar el tipo.Ejemplos:
                                    <ul style="list-style-type: circle;">
                                        <li>C++ - Templates</li>
                                        <li>Java - Generics</li>
                                    </ul>
                                    <b>Polimorfismo de subtipos</b>: Es una forma de polimorfismo en la cual los
                                    subtipos de un tipo pueden sustituir el comportamiento de las funciones del
                                    supertipo con su propia implementación.<br><br>
                                    <center><img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/polisubtipos.png"></center>
                                </div>
                                <!--Atributos estáticos-->
                                <br>
                                <div align="justify"><strong>Atributos estáticos</strong>
                                    <br><br>Son atributos inherentes a la clase en sí y no a una instancia de esta.<br><br>
                                    <center>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/static1.png" id="ventajas">
                                        <h5>Ejemplo de la clase estudiante con el atributo estático <i>numero_estudiantes</i>.
                                        </h5>
                                    </center>
                                    <br>
                                    Este atributo, como se puede observar, incrementa su valor en <strong>1</strong>
                                    cada vez
                                    que se crea una instancia de esta clase, este atributo, como ya se mencionó,
                                    pertenece a la clase
                                    y no al objeto, así que el número de estudiantes será de la clase <i>Estudiante</i>
                                    y no del objeto
                                    instanciado de esta.
                                    <br>
                                    <br>
                                    <center>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/static2.png" id="ventajas">
                                        <h5>Ejemplo del uso de atributos estáticos</h5>
                                    </center>
                                    <br> Como se ve en el ejemplo, se instanciaron<strong> 3</strong> objetos de la
                                    clase <i>estudiante</i>
                                    al consultar este atributo se debe accedes desde la clase <i>estudiante</i> y no
                                    desde la instancia de esta.
                                    <br>
                                </div>
                                <!--Métodos estáticos-->
                                <br>
                                <div align="justify"><strong>Métodos estáticos </strong>
                                    <br><br>Son métodos inherentes a la clase en sí y no a una instancia de
                                    esta.<br><br>
                                    <center>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/static3.png" id="ventajas">
                                        <h5>Ejemplo del método estático <i>ordenarAlfabeticamente</i> que retorna una
                                            lista ordenada
                                            lexicográficamente.</h5>
                                    </center>
                                    <br>
                                    <br>
                                </div>
                                <br>
                                <!--Clases estáticas-->
                                <br>
                                <div align="justify"><strong>Clases estáticas</strong>
                                    <center>
                                        <br>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/static4.png" id="ventajas">
                                        <br><br>
                                        <img src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/static5.png" id="ventajas">
                                        <h5>Ejemplos de clases estáticas en java y el acceso a ellas.</h5>
                                    </center>
                                    <br>
                                    <br>
                                </div>
                                <br>
                            </h3>
                        </div>
                    </h3>
                
            </ul>
        </section>
    </div>


    <div class="footer">
        <center>
            <a href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/index.html">Paradigma</a> |
            <a href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/concepts.html">Conceptos </a> |
            <a href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/philosophy.html">Filosofía</a> |
            <a href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/examples.html">Ejemplos</a> |
            <a href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/applications.html">Aplicaciones</a> |
            <a href="https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/slides.html">Referencias</a>
        </center>
        <br>
        <div class="footer-text">
            <center>
                Creado y modificado por: Laura Álvarez, Helmer Avendaño, Yeison García, Sebastián Morales, <br>
                Edwin Bohórquez, Santiago Hernandez, Sebastián Moreno, Cristian Orjuela
                <br>
                <br>
                <p>Copyright © Paradigmas de Programación - UNAL 2017</p>

            </center>
        </div>
    </div>

    <script src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/jquery.js">
    </script>
    <script src="Paradigma%20de%20la%20programaci%C3%B3n%20orientada%20a%20objetos_files/bootstrap.min.js"></script>
</div>



<textarea id="BFI_DATA" style="width: 1px; height: 1px; display: none;"></textarea><title> </title><div id="WidgetFloaterPanels" translate="no" style="display: none; text-align: left; direction: ltr; visibility: hidden;" class="LTRStyle"> <div id="WidgetFloater" style="display: none" onmouseover="Microsoft.Translator.OnMouseOverFloater()" onmouseout="Microsoft.Translator.OnMouseOutFloater()"> <div id="WidgetLogoPanel"> <span id="WidgetTranslateWithSpan"><span>TRANSLATE with </span><img id="FloaterLogo"></span> <span id="WidgetCloseButton" title="Exit Translation" onclick="Microsoft.Translator.FloaterOnClose()">x</span></div> <div id="LanguageMenuPanel"> <div class="DDStyle_outer"><input name="LanguageMenu_svid" type="text" id="LanguageMenu_svid" style="display:none;" autocomplete="on" value="en" onclick="this.select()"> <input name="LanguageMenu_textid" type="text" id="LanguageMenu_textid" style="display:none;" autocomplete="on" onclick="this.select()"> <span onselectstart="return false" tabindex="0" class="DDStyle" id="__LanguageMenu_header" onclick="return LanguageMenu &amp;&amp; !LanguageMenu.Show('__LanguageMenu_popup', event);" onkeydown="return LanguageMenu &amp;&amp; !LanguageMenu.Show('__LanguageMenu_popup', event);">English</span> <div style="position:relative;text-align:left;left:0;"><div style="position:absolute;width:;left:0px;"><div class="DDStyle" style="display:none;" id="__LanguageMenu_popup"> <table id="LanguageMenu" border="0"> <tbody><tr> <td><a tabindex="-1" onclick="return LanguageMenu.onclick('ar');" ondragstart="LanguageMenu.ondragstart(event);" href="#ar">Arabic</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('he');" ondragstart="LanguageMenu.ondragstart(event);" href="#he">Hebrew</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('pl');" ondragstart="LanguageMenu.ondragstart(event);" href="#pl">Polish</a></td> </tr><tr> <td><a tabindex="-1" onclick="return LanguageMenu.onclick('bg');" ondragstart="LanguageMenu.ondragstart(event);" href="#bg">Bulgarian</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('hi');" ondragstart="LanguageMenu.ondragstart(event);" href="#hi">Hindi</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('pt');" ondragstart="LanguageMenu.ondragstart(event);" href="#pt">Portuguese</a></td> </tr><tr> <td><a tabindex="-1" onclick="return LanguageMenu.onclick('ca');" ondragstart="LanguageMenu.ondragstart(event);" href="#ca">Catalan</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('mww');" ondragstart="LanguageMenu.ondragstart(event);" href="#mww">Hmong Daw</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('ro');" ondragstart="LanguageMenu.ondragstart(event);" href="#ro">Romanian</a></td> </tr><tr> <td><a tabindex="-1" onclick="return LanguageMenu.onclick('zh-CHS');" ondragstart="LanguageMenu.ondragstart(event);" href="#zh-CHS">Chinese Simplified</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('hu');" ondragstart="LanguageMenu.ondragstart(event);" href="#hu">Hungarian</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('ru');" ondragstart="LanguageMenu.ondragstart(event);" href="#ru">Russian</a></td> </tr><tr> <td><a tabindex="-1" onclick="return LanguageMenu.onclick('zh-CHT');" ondragstart="LanguageMenu.ondragstart(event);" href="#zh-CHT">Chinese Traditional</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('id');" ondragstart="LanguageMenu.ondragstart(event);" href="#id">Indonesian</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('sk');" ondragstart="LanguageMenu.ondragstart(event);" href="#sk">Slovak</a></td> </tr><tr> <td><a tabindex="-1" onclick="return LanguageMenu.onclick('cs');" ondragstart="LanguageMenu.ondragstart(event);" href="#cs">Czech</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('it');" ondragstart="LanguageMenu.ondragstart(event);" href="#it">Italian</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('sl');" ondragstart="LanguageMenu.ondragstart(event);" href="#sl">Slovenian</a></td> </tr><tr> <td><a tabindex="-1" onclick="return LanguageMenu.onclick('da');" ondragstart="LanguageMenu.ondragstart(event);" href="#da">Danish</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('ja');" ondragstart="LanguageMenu.ondragstart(event);" href="#ja">Japanese</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('es');" ondragstart="LanguageMenu.ondragstart(event);" href="#es">Spanish</a></td> </tr><tr> <td><a tabindex="-1" onclick="return LanguageMenu.onclick('nl');" ondragstart="LanguageMenu.ondragstart(event);" href="#nl">Dutch</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('tlh');" ondragstart="LanguageMenu.ondragstart(event);" href="#tlh">Klingon</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('sv');" ondragstart="LanguageMenu.ondragstart(event);" href="#sv">Swedish</a></td> </tr><tr> <td><a tabindex="-1" onclick="return LanguageMenu.onclick('en');" ondragstart="LanguageMenu.ondragstart(event);" href="#en">English</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('ko');" ondragstart="LanguageMenu.ondragstart(event);" href="#ko">Korean</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('th');" ondragstart="LanguageMenu.ondragstart(event);" href="#th">Thai</a></td> </tr><tr> <td><a tabindex="-1" onclick="return LanguageMenu.onclick('et');" ondragstart="LanguageMenu.ondragstart(event);" href="#et">Estonian</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('lv');" ondragstart="LanguageMenu.ondragstart(event);" href="#lv">Latvian</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('tr');" ondragstart="LanguageMenu.ondragstart(event);" href="#tr">Turkish</a></td> </tr><tr> <td><a tabindex="-1" onclick="return LanguageMenu.onclick('fi');" ondragstart="LanguageMenu.ondragstart(event);" href="#fi">Finnish</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('lt');" ondragstart="LanguageMenu.ondragstart(event);" href="#lt">Lithuanian</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('uk');" ondragstart="LanguageMenu.ondragstart(event);" href="#uk">Ukrainian</a></td> </tr><tr> <td><a tabindex="-1" onclick="return LanguageMenu.onclick('fr');" ondragstart="LanguageMenu.ondragstart(event);" href="#fr">French</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('ms');" ondragstart="LanguageMenu.ondragstart(event);" href="#ms">Malay</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('ur');" ondragstart="LanguageMenu.ondragstart(event);" href="#ur">Urdu</a></td> </tr><tr> <td><a tabindex="-1" onclick="return LanguageMenu.onclick('de');" ondragstart="LanguageMenu.ondragstart(event);" href="#de">German</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('mt');" ondragstart="LanguageMenu.ondragstart(event);" href="#mt">Maltese</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('vi');" ondragstart="LanguageMenu.ondragstart(event);" href="#vi">Vietnamese</a></td> </tr><tr> <td><a tabindex="-1" onclick="return LanguageMenu.onclick('el');" ondragstart="LanguageMenu.ondragstart(event);" href="#el">Greek</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('no');" ondragstart="LanguageMenu.ondragstart(event);" href="#no">Norwegian</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('cy');" ondragstart="LanguageMenu.ondragstart(event);" href="#cy">Welsh</a></td> </tr><tr> <td><a tabindex="-1" onclick="return LanguageMenu.onclick('ht');" ondragstart="LanguageMenu.ondragstart(event);" href="#ht">Haitian Creole</a></td><td><a tabindex="-1" onclick="return LanguageMenu.onclick('fa');" ondragstart="LanguageMenu.ondragstart(event);" href="#fa">Persian</a></td><td></td> </tr> </tbody></table> <img alt="" style="height:7px;width:17px;border-width:0px;left:20px;"> </div></div></div></div> <script type="text/javascript"> var LanguageMenu; var LanguageMenu_keys=["ar","bg","ca","zh-CHS","zh-CHT","cs","da","nl","en","et","fi","fr","de","el","ht","he","hi","mww","hu","id","it","ja","tlh","ko","lv","lt","ms","mt","no","fa","pl","pt","ro","ru","sk","sl","es","sv","th","tr","uk","ur","vi","cy"]; var LanguageMenu_values=["Arabic","Bulgarian","Catalan","Chinese Simplified","Chinese Traditional","Czech","Danish","Dutch","English","Estonian","Finnish","French","German","Greek","Haitian Creole","Hebrew","Hindi","Hmong Daw","Hungarian","Indonesian","Italian","Japanese","Klingon","Korean","Latvian","Lithuanian","Malay","Maltese","Norwegian","Persian","Polish","Portuguese","Romanian","Russian","Slovak","Slovenian","Spanish","Swedish","Thai","Turkish","Ukrainian","Urdu","Vietnamese","Welsh"]; var LanguageMenu_callback=function(){ }; var LanguageMenu_popupid='__LanguageMenu_popup'; </script> </div> <div id="CTFLinksPanel"> <span id="ExternalLinksPanel"><a id="HelpLink" title="Help" target="_blank" href="https://go.microsoft.com/?linkid=9722454"> <img id="HelpImg"></a> <a id="EmbedLink" href="javascript:Microsoft.Translator.FloaterShowEmbed()" title="Get this widget for your own site"> <img id="EmbedImg"></a> <a id="ShareLink" title="Share translated page with friends" href="javascript:Microsoft.Translator.FloaterShowSharePanel()"> <img id="ShareImg"></a> </span> </div> <div id="FloaterProgressBar"> <span id="ProgressFill"></span> </div> </div> <div id="WidgetFloaterCollapsed" style="display: none" onmouseover="Microsoft.Translator.OnMouseOverFloater()"> <span>TRANSLATE with </span><img id="CollapsedLogoImg"></div> <div id="FloaterSharePanel" style="display: none"> <div id="ShareTextDiv"> <span id="ShareTextSpan"> COPY THE URL BELOW </span> </div> <div id="ShareTextboxDiv"> <input name="ShareTextbox" type="text" id="ShareTextbox" readonly="readonly" onclick="this.select()"> <!--a id="TwitterLink" title="Share on Twitter"> <img id="TwitterImg" /></a> <a-- id="FacebookLink" title="Share on Facebook"> <img id="FacebookImg" /></a--> <a id="EmailLink" title="Email this translation"> <img id="EmailImg"></a> </div> <div id="ShareFooter"> <span id="ShareHelpSpan"><a id="ShareHelpLink"> <img id="ShareHelpImg"></a></span> <span id="ShareBackSpan"><a id="ShareBack" href="javascript:Microsoft.Translator.FloaterOnShareBackClick()" title="Back To Translation"> Back</a></span> </div> <input name="EmailSubject" type="hidden" id="EmailSubject" value="Check out this page in {0} translated from {1}"> <input name="EmailBody" type="hidden" id="EmailBody" value="Translated: {0}%0d%0aOriginal: {1}%0d%0a%0d%0aAutomatic translation powered by Microsoft® Translator%0d%0ahttp://www.bing.com/translator?ref=MSTWidget"> <input type="hidden" id="ShareHelpText" value="This link allows visitors to launch this page and automatically translate it to {0}."> </div> <div id="FloaterEmbed" style="display: none"> <div id="EmbedTextDiv"> <span id="EmbedTextSpan">EMBED THE SNIPPET BELOW IN YOUR SITE</span> <a id="EmbedHelpLink" title="Copy this code and place it into your HTML."> <img id="EmbedHelpImg"></a> </div> <div id="EmbedTextboxDiv"> <input name="EmbedSnippetTextBox" type="text" id="EmbedSnippetTextBox" readonly="readonly" value="&lt;div id='MicrosoftTranslatorWidget' class='Dark' style='color:white;background-color:#555555'&gt;&lt;/div&gt;&lt;script type='text/javascript'&gt;setTimeout(function(){var s=document.createElement('script');s.type='text/javascript';s.charset='UTF-8';s.src=((location &amp;&amp; location.href &amp;&amp; location.href.indexOf('https') == 0)?'https://ssl.microsofttranslator.com':'http://www.microsofttranslator.com')+'/ajax/v3/WidgetV3.ashx?siteData=ueOIGRSKkd965FeEGM5JtQ**&amp;ctf=true&amp;ui=true&amp;settings=manual&amp;from=en';var p=document.getElementsByTagName('head')[0]||document.documentElement;p.insertBefore(s,p.firstChild); },0);&lt;/script&gt;" onclick="this.select()"> </div> <div id="EmbedNoticeDiv"><span id="EmbedNoticeSpan">Enable collaborative features and customize widget: <a href="http://www.bing.com/widget/translator" target="_blank">Bing Webmaster Portal</a></span></div> <div id="EmbedFooterDiv"><span id="EmbedBackSpan"><a href="javascript:Microsoft.Translator.FloaterOnEmbedBackClick()" title="Back To Translation">Back</a></span></div> </div> <script type="text/javascript"> var intervalId = setInterval(function () { if (MtPopUpList) { LanguageMenu = new MtPopUpList(); var langMenu = document.getElementById(LanguageMenu_popupid); var origLangDiv = document.createElement("div"); origLangDiv.id = "OriginalLanguageDiv"; origLangDiv.innerHTML = "<span id='OriginalTextSpan'>ORIGINAL: </span><span id='OriginalLanguageSpan'></span>"; langMenu.appendChild(origLangDiv); LanguageMenu.Init('LanguageMenu', LanguageMenu_keys, LanguageMenu_values, LanguageMenu_callback, LanguageMenu_popupid); window["LanguageMenu"] = LanguageMenu; clearInterval(intervalId); } }, 1); </script> </div><div class="TnITTtw-fp-collapsed-button" style="display: block;"></div><div class="TnITTtw-mate-fp-bar" translate="no" style="z-index: 81; width: 0px; height: 0px; opacity: 0; display: none;">    <div class="TnITTtw-hide-fp-bar" style="display: none;"></div>    <div class="TnITTtw-current-page-lang" style="display: none;">This page is in Spanish</div>    <div class="TnITTtw-cta-button-layout" style="display: none;">        <div class="TnITTtw-spinner">            <div class="TnITTtw-bounce1"></div>            <div class="TnITTtw-bounce2"></div>            <div class="TnITTtw-bounce3"></div>        </div>        <div class="TnITTtw-mw-button TnITTtw-fp-translate TnITTtw-high-cta" style="display: none;">Translate to English</div>    </div>    <div class="TnITTtw-change-language TnITTtw-select" data-for-serial="3" style="display: none;"></div>    <div class="TnITTtw-stop-fp"></div>    <div class="TnITTtw-toggle-iphone-settings" style="display: none;"></div>    <div class="TnITTtw-ui_selector" style="display: none;">        <div class="TnITTtw-options-arrow" style="display: none;"></div>        <div class="TnITTtw-options TnITTtw-opt-3 TnITTtw-standalone" data-serial="3" style="display: none; z-index: 998;">            <div class="TnITTtw-dd-search">                <input class="TnITTtw-dd-input" type="text" data-dir="to" placeholder="Search" data-width="NaN">            </div>            <div id="selVisibleScroll-3">                <div id="selEntireScroll-3">                    <div class="TnITTtw-inner-options-layout">                        <ul class="TnITTtw-list"><li class="lang-af TnITTtw-option" index="1"><span id="lang-af" val="af" class="lang-af">Afrikaans</span></li><li class="lang-sq TnITTtw-option" index="2"><span id="lang-sq" val="sq" class="lang-sq">Albanian</span></li><li class="lang-am TnITTtw-option" index="3"><span id="lang-am" val="am" class="lang-am">Amharic</span></li><li class="lang-ar TnITTtw-option" index="4"><span id="lang-ar" val="ar" class="lang-ar">Arabic</span></li><li class="lang-hy TnITTtw-option" index="5"><span id="lang-hy" val="hy" class="lang-hy">Armenian</span></li><li class="lang-az TnITTtw-option" index="6"><span id="lang-az" val="az" class="lang-az">Azerbaijani</span></li><li class="lang-bn TnITTtw-option" index="7"><span id="lang-bn" val="bn" class="lang-bn">Bengali</span></li><li class="lang-bg TnITTtw-option" index="8"><span id="lang-bg" val="bg" class="lang-bg">Bulgarian</span></li><li class="lang-ca TnITTtw-option" index="9"><span id="lang-ca" val="ca" class="lang-ca">Catalan</span></li><li class="lang-hr TnITTtw-option" index="10"><span id="lang-hr" val="hr" class="lang-hr">Croatian</span></li><li class="lang-cs TnITTtw-option" index="11"><span id="lang-cs" val="cs" class="lang-cs">Czech</span></li><li class="lang-da TnITTtw-option" index="12"><span id="lang-da" val="da" class="lang-da">Danish</span></li><li class="lang-nl TnITTtw-option" index="13"><span id="lang-nl" val="nl" class="lang-nl">Dutch</span></li><li class="lang-en TnITTtw-option_selected" index="14"><span id="lang-en" val="en" class="lang-en">English</span></li><li class="lang-et TnITTtw-option" index="15"><span id="lang-et" val="et" class="lang-et">Estonian</span></li><li class="lang-fi TnITTtw-option" index="16"><span id="lang-fi" val="fi" class="lang-fi">Finnish</span></li><li class="lang-fr TnITTtw-option" index="17"><span id="lang-fr" val="fr" class="lang-fr">French</span></li><li class="lang-de TnITTtw-option" index="18"><span id="lang-de" val="de" class="lang-de">German</span></li><li class="lang-el TnITTtw-option" index="19"><span id="lang-el" val="el" class="lang-el">Greek</span></li><li class="lang-gu TnITTtw-option" index="20"><span id="lang-gu" val="gu" class="lang-gu">Gujarati</span></li><li class="lang-ht TnITTtw-option" index="21"><span id="lang-ht" val="ht" class="lang-ht">Haitian Creole</span></li><li class="lang-iw TnITTtw-option" index="22"><span id="lang-iw" val="iw" class="lang-iw">Hebrew</span></li><li class="lang-hi TnITTtw-option" index="23"><span id="lang-hi" val="hi" class="lang-hi">Hindi</span></li><li class="lang-hu TnITTtw-option" index="24"><span id="lang-hu" val="hu" class="lang-hu">Hungarian</span></li><li class="lang-is TnITTtw-option" index="25"><span id="lang-is" val="is" class="lang-is">Icelandic</span></li><li class="lang-id TnITTtw-option" index="26"><span id="lang-id" val="id" class="lang-id">Indonesian</span></li><li class="lang-it TnITTtw-option" index="27"><span id="lang-it" val="it" class="lang-it">Italian</span></li><li class="lang-ja TnITTtw-option" index="28"><span id="lang-ja" val="ja" class="lang-ja">Japanese</span></li><li class="lang-kn TnITTtw-option" index="29"><span id="lang-kn" val="kn" class="lang-kn">Kannada</span></li><li class="lang-kk TnITTtw-option" index="30"><span id="lang-kk" val="kk" class="lang-kk">Kazakh</span></li><li class="lang-km TnITTtw-option" index="31"><span id="lang-km" val="km" class="lang-km">Khmer</span></li><li class="lang-ko TnITTtw-option" index="32"><span id="lang-ko" val="ko" class="lang-ko">Korean</span></li><li class="lang-ku TnITTtw-option" index="33"><span id="lang-ku" val="ku" class="lang-ku">Kurdish (Kurmanji)</span></li><li class="lang-lo TnITTtw-option" index="34"><span id="lang-lo" val="lo" class="lang-lo">Lao</span></li><li class="lang-lv TnITTtw-option" index="35"><span id="lang-lv" val="lv" class="lang-lv">Latvian</span></li><li class="lang-lt TnITTtw-option" index="36"><span id="lang-lt" val="lt" class="lang-lt">Lithuanian</span></li><li class="lang-mg TnITTtw-option" index="37"><span id="lang-mg" val="mg" class="lang-mg">Malagasy</span></li><li class="lang-ms TnITTtw-option" index="38"><span id="lang-ms" val="ms" class="lang-ms">Malay</span></li><li class="lang-ml TnITTtw-option" index="39"><span id="lang-ml" val="ml" class="lang-ml">Malayalam</span></li><li class="lang-mt TnITTtw-option" index="40"><span id="lang-mt" val="mt" class="lang-mt">Maltese</span></li><li class="lang-mi TnITTtw-option" index="41"><span id="lang-mi" val="mi" class="lang-mi">Maori</span></li><li class="lang-mr TnITTtw-option" index="42"><span id="lang-mr" val="mr" class="lang-mr">Marathi</span></li><li class="lang-my TnITTtw-option" index="43"><span id="lang-my" val="my" class="lang-my">Myanmar (Burmese)</span></li><li class="lang-ne TnITTtw-option" index="44"><span id="lang-ne" val="ne" class="lang-ne">Nepali</span></li><li class="lang-no TnITTtw-option" index="45"><span id="lang-no" val="no" class="lang-no">Norwegian</span></li><li class="lang-ps TnITTtw-option" index="46"><span id="lang-ps" val="ps" class="lang-ps">Pashto</span></li><li class="lang-fa TnITTtw-option" index="47"><span id="lang-fa" val="fa" class="lang-fa">Persian</span></li><li class="lang-pl TnITTtw-option" index="48"><span id="lang-pl" val="pl" class="lang-pl">Polish</span></li><li class="lang-pt TnITTtw-option" index="49"><span id="lang-pt" val="pt" class="lang-pt">Portuguese</span></li><li class="lang-pa TnITTtw-option" index="50"><span id="lang-pa" val="pa" class="lang-pa">Punjabi</span></li><li class="lang-ro TnITTtw-option" index="51"><span id="lang-ro" val="ro" class="lang-ro">Romanian</span></li><li class="lang-ru TnITTtw-option" index="52"><span id="lang-ru" val="ru" class="lang-ru">Russian</span></li><li class="lang-sm TnITTtw-option" index="53"><span id="lang-sm" val="sm" class="lang-sm">Samoan</span></li><li class="lang-zh-CN TnITTtw-option" index="54"><span id="lang-zh-CN" val="zh-CN" class="lang-zh-CN">Simplified Chinese</span></li><li class="lang-sk TnITTtw-option" index="55"><span id="lang-sk" val="sk" class="lang-sk">Slovak</span></li><li class="lang-sl TnITTtw-option" index="56"><span id="lang-sl" val="sl" class="lang-sl">Slovenian</span></li><li class="lang-es TnITTtw-option" index="57"><span id="lang-es" val="es" class="lang-es">Spanish</span></li><li class="lang-sv TnITTtw-option" index="58"><span id="lang-sv" val="sv" class="lang-sv">Swedish</span></li><li class="lang-ta TnITTtw-option" index="59"><span id="lang-ta" val="ta" class="lang-ta">Tamil</span></li><li class="lang-te TnITTtw-option" index="60"><span id="lang-te" val="te" class="lang-te">Telugu</span></li><li class="lang-th TnITTtw-option" index="61"><span id="lang-th" val="th" class="lang-th">Thai</span></li><li class="lang-zh-TW TnITTtw-option" index="62"><span id="lang-zh-TW" val="zh-TW" class="lang-zh-TW">Traditional Chinese</span></li><li class="lang-tr TnITTtw-option" index="63"><span id="lang-tr" val="tr" class="lang-tr">Turkish</span></li><li class="lang-uk TnITTtw-option" index="64"><span id="lang-uk" val="uk" class="lang-uk">Ukrainian</span></li><li class="lang-ur TnITTtw-option" index="65"><span id="lang-ur" val="ur" class="lang-ur">Urdu</span></li><li class="lang-vi TnITTtw-option" index="66"><span id="lang-vi" val="vi" class="lang-vi">Vietnamese</span></li><li class="lang-cy TnITTtw-option" index="67"><span id="lang-cy" val="cy" class="lang-cy">Welsh</span></li></ul>                    </div>                </div>                <div id="sel-scrollbar-3">                    <div id="sel-track-3">                        <div id="sel-dragBar-3"></div>                    </div>                </div>            </div>        </div>    </div>    <div class="TnITTtw-fp-options" style="display: none;">        <input type="checkbox" id="TnITTtw-always-translate" readonly="readonly" style="display: none;"><label for="TnITTtw-always-translate" class="TnITTtw-always-translate-label TnITTtw-not-pro" style="display: none;"><span class="TnITTtw-always-translate-inner-label" style="display: none;">Always translate Spanish to English</span><span class="TnITTtw-pro-label" style="display: none;">PRO</span></label>        <br style="display: none;">        <input type="checkbox" id="TnITTtw-never-translate-lang" style="display: none;"><label for="TnITTtw-never-translate-lang" class="TnITTtw-never-translate-lang-label" style="display: none;">Never translate Spanish</label>        <br style="display: none;">        <input type="checkbox" id="TnITTtw-never-translate-site" style="display: none;"><label for="TnITTtw-never-translate-site" class="TnITTtw-never-translate-site-label" style="display: none;">Never translate ferestrepoca.github.io</label>    </div></div></body><grammarly-desktop-integration data-grammarly-shadow-root="true"></grammarly-desktop-integration></html>